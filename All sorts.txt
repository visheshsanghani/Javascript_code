import java.util.Arrays;

public class Code {
  public static void main(String[] args) {
		int[] arr = { 12, 32, 9 , 2, 54,1};
		Code code = new Code();
    System.out.println("Insertion Sort : "+ Arrays.toString(code.insertionSort(arr)));
		int[] arr1 = { 12, 32, 9 , 2, 54, 1 };
    System.out.println("Bubble Sort : "+ Arrays.toString(code.bubbleSort(arr1)));
    int[] arr2 = { 12, 32, 9 , 2, 54, 1 };
		code.quickSort(arr2 , 0 ,arr2.length-1);
    System.out.println("Quick Sort : "+ Arrays.toString(arr2));
		int[] arr3 = { 12, 32, 9 , 2, 54, 1 };
    System.out.println("Selection Sort : "+ Arrays.toString(code.selectionSort(arr3)));
  }
	public int[] insertionSort(int[] arr){
    int n = arr.length;
		for(int i = 1; i < n ; i++){
      int key = arr[i];
			int j = i - 1;
		while(j>=0 && arr[j]>key){
      arr[j+1]=arr[j];
			j = j-1;
    }
		arr[j+1] = key;
    }
		return arr;
  }
  public int[] bubbleSort(int[] arr){
    int n = arr.length;
		boolean swapped = false;
		
    for(int i = 0 ; i < n-1;i++){
      swapped = false;
      for(int j = 0 ; j < n - i - 1;j++){
        if(arr[j] > arr[j+1]){
          int temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
          swapped = true;
        }
      }
		if(swapped == false){
      break;
    }
    }
	return arr;
  }
  public void quickSort(int[] arr , int low , int high){
    if(low < high){
      int pi = partision(arr , low , high);

		quickSort(arr, low , pi -1 );
		quickSort(arr , pi + 1 , high);
    }
  }
	public static int partision(int[] arr , int low, int high){
    int pivot = arr[high];
		int i = low-1;
    for(int j = low; j < high ;j++){
      if(arr[j]<pivot){
        i++;
        int temp = arr[j];
				arr[j]= arr[i];
				arr[i] =temp;
      }}
			int temp = arr[high];
      arr[high] = arr[i+1];
			arr[i+1] = temp;
    
		return i+1;
  }
  
  public int[] selectionSort(int[] arr){
    int n = arr.length;
		for(int i = 0 ; i< n ; i++){
      	int min_idx = i;
				for(int j = i + 1 ; j < n ; j++){
          if(arr[j]<arr[min_idx]){
            min_idx = j;
          }
        }
			int temp = arr[min_idx];
			arr[min_idx] = arr[i];
			arr[i] = temp;
    }
		return arr;
  }
  public void mergeSort(int[] arr , int l , int r){
    if(l < r){
       int m = (r+l)/2;
			mergeSort(arr , l , m);
			mergeSort(arr , m+1 , r);
		
		merge(arr , l , m ,r);
    }
  }
	 
  public static void merge(int[] arr , int l , int m  , int r){
    int n1 = m - l + 1;
		int n2 = r - m ;

    int L[] = new int[n1];
    	for(int i = 0 ; i < n1 ;i++)
        L[i] = arr[l+i];
		int R[] = new int[n2];
    	for(int j = 0 ; j < n2 ;j++)
        R[j] = arr[m + 1 + j ];
    
			int i = 0 , j = 0 , k = l;
    	
    while(i < n1 && j < n2){
      if(L[i]<=R[j]){
        arr[k] = L[i];
				i++;
      }else{
        arr[k] = R[j];
				j++;
      }
			k++;
    }
			while(i < n1){
        arr[k] = L[i];
				i++;
				k++;
      }
    	while(j < n2){
        arr[k] = R[j];
				j++;
				k++;
      }
  }
  }
